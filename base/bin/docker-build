#!/usr/bin/env bash
set -e

POSITIONAL=()
while [[ $# -gt 0 ]]; do
  case ${1} in
    --build-arg)
    BUILD_ARG="${1} ${2}" # --build-arg KEY=VALUE
    shift # past argument
    shift # past argument
    ;;
    --suffix)  # Disable docker push
    TAG_SUFFIX="${2}"
    shift # past argument
    shift # past value
    ;;
    --multi-arch)
    MULTIARCH=TRUE
    shift # past argument
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
  esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

IMAGE_NAME=$1
DOCKERFILE_PATH=${2:-'./'}

if [ -z "${IMAGE_NAME}" ]; then echo "Image name required. ie willfarrell/codeship-docker"; exit 1; fi


if [ "${MULTIARCH}" == "TRUE" ]; then
  docker pull multiarch/qemu-user-static:register
  docker run --rm --privileged multiarch/qemu-user-static:register --reset
fi


# Pull if exists
docker pull ${IMAGE_NAME}:${GIT_COMMIT_ID}${TAG_SUFFIX} || :

# Build
## :commit
export DOCKER_BUILDKIT=1
docker build ${BUILD_ARG} --tag ${IMAGE_NAME}:${GIT_COMMIT_ID}${TAG_SUFFIX} --build-arg DOCKER_INLINE_CACHE=1 ${DOCKERFILE_PATH}

## :latest
if [ "${ENVIRONMENT}" == "production" ]; then
  if [ "${TAG_SUFFIX}" != "" ]; then
    TAG="${TAG_SUFFIX}"
  else
    TAG=latest
  fi
  docker tag ${IMAGE_NAME}:${GIT_COMMIT_ID} ${IMAGE_NAME}:${TAG}
fi

## :v0.0.0-rc.1 -> 0, 0.0, 0.0.0, 0.0.0-rc.1
function semverParse {
	set $(echo ${1//v/} | tr ".-" " ")
	echo $1
	echo $2
	echo $3
	shift
	shift
	shift
	echo ${@} | tr " " "."
}
if [ "${GIT_COMMIT_TAG}" != "" ] && [[ ${GIT_COMMIT_TAG} == v* ]]; then
  TAGS=($(semverParse ${GIT_COMMIT_TAG}))
  if [[ ${#TAGS[@]} -gt 3 ]]; then
    TAG="${TAGS[0]}.${TAGS[1]}.${TAGS[2]}-${TAGS[3]}"
    docker tag ${IMAGE_NAME}:${GIT_COMMIT_ID}${TAG_SUFFIX} ${IMAGE_NAME}:${TAG}${TAG_SUFFIX}
  fi
  TAG="${TAGS[0]}.${TAGS[1]}.${TAGS[2]}"
  docker tag ${IMAGE_NAME}:${GIT_COMMIT_ID}${TAG_SUFFIX} ${IMAGE_NAME}:${TAG}${TAG_SUFFIX}
  TAG="${TAGS[0]}.${TAGS[1]}"
  docker tag ${IMAGE_NAME}:${GIT_COMMIT_ID}${TAG_SUFFIX} ${IMAGE_NAME}:${TAG}${TAG_SUFFIX}
  TAG="${TAGS[0]}"
  docker tag ${IMAGE_NAME}:${GIT_COMMIT_ID}${TAG_SUFFIX} ${IMAGE_NAME}:${TAG}${TAG_SUFFIX}
elif [ "${GIT_COMMIT_TAG}" != "" ]; then
  # Apply tag as is
  docker tag ${IMAGE_NAME}:${GIT_COMMIT_ID}${TAG_SUFFIX} ${IMAGE_NAME}:${GIT_COMMIT_TAG}${TAG_SUFFIX}
fi
